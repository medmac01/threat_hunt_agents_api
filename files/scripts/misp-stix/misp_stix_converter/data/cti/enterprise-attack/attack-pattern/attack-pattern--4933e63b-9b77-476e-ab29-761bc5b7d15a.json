{
    "type": "bundle",
    "id": "bundle--31a0a52c-0700-4ae4-8245-b9acc4b5845c",
    "spec_version": "2.0",
    "objects": [
        {
            "x_mitre_platforms": [
                "macOS",
                "Linux",
                "Windows"
            ],
            "x_mitre_domains": [
                "enterprise-attack"
            ],
            "x_mitre_contributors": [
                "Jo\u00e3o Paulo de A. Filho, @Hug1nN__",
                "Shlomi Salem, SentinelOne",
                "Lior Ribak, SentinelOne",
                "Rex Guo, @Xiaofei_REX, Confluera",
                "Joas Antonio dos Santos, @C0d3Cr4zy, Inmetrics"
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "type": "attack-pattern",
            "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
            "created": "2021-10-05T01:15:06.293Z",
            "x_mitre_version": "1.0",
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "external_id": "T1620",
                    "url": "https://attack.mitre.org/techniques/T1620"
                },
                {
                    "source_name": "00sec Droppers",
                    "url": "https://0x00sec.org/t/super-stealthy-droppers/3715",
                    "description": "0x00pico. (2017, September 25). Super-Stealthy Droppers. Retrieved October 4, 2021."
                },
                {
                    "source_name": "S1 Custom Shellcode Tool",
                    "url": "https://www.sentinelone.com/blog/building-a-custom-tool-for-shellcode-analysis/",
                    "description": "Bunce, D. (2019, October 31). Building A Custom Tool For Shellcode Analysis. Retrieved October 4, 2021."
                },
                {
                    "source_name": "Mandiant BYOL",
                    "url": "https://www.mandiant.com/resources/bring-your-own-land-novel-red-teaming-technique",
                    "description": "Kirk, N. (2018, June 18). Bring Your Own Land (BYOL) \u2013 A Novel Red Teaming Technique. Retrieved October 4, 2021."
                },
                {
                    "source_name": "S1 Old Rat New Tricks",
                    "url": "https://www.sentinelone.com/blog/teaching-an-old-rat-new-tricks/",
                    "description": "Landry, J. (2016, April 21). Teaching an old RAT new tricks. Retrieved October 4, 2021."
                },
                {
                    "source_name": "MDSec Detecting DOTNET",
                    "url": "https://www.mdsec.co.uk/2020/06/detecting-and-advancing-in-memory-net-tradecraft/",
                    "description": "MDSec Research. (n.d.). Detecting and Advancing In-Memory .NET Tradecraft. Retrieved October 4, 2021."
                },
                {
                    "source_name": "Intezer ACBackdoor",
                    "url": "https://www.intezer.com/blog/research/acbackdoor-analysis-of-a-new-multiplatform-backdoor/",
                    "description": "Sanmillan, I. (2019, November 18). ACBackdoor: Analysis of a New Multiplatform Backdoor. Retrieved October 4, 2021."
                },
                {
                    "source_name": "Stuart ELF Memory",
                    "url": "https://magisterquis.github.io/2018/03/31/in-memory-only-elf-execution.html",
                    "description": "Stuart. (2018, March 31). In-Memory-Only ELF Execution (Without tmpfs). Retrieved October 4, 2021."
                },
                {
                    "source_name": "Introducing Donut",
                    "url": "https://thewover.github.io/Introducing-Donut/",
                    "description": "The Wover. (2019, May 9). Donut - Injecting .NET Assemblies as Shellcode. Retrieved October 4, 2021."
                }
            ],
            "x_mitre_deprecated": false,
            "revoked": false,
            "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
            "modified": "2022-04-21T16:21:09.679Z",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": "Reflective Code Loading",
            "x_mitre_detection": "Monitor for code artifacts associated with reflectively loading code, such as the abuse of .NET functions such as <code>Assembly.Load()</code> and [Native API](https://attack.mitre.org/techniques/T1106) functions such as <code>CreateThread()</code>, <code>memfd_create()</code>, <code>execve()</code>, and/or <code>execveat()</code>.(Citation: 00sec Droppers)(Citation: S1 Old Rat New Tricks)\n\nMonitor for artifacts of abnormal process execution. For example, a common signature related to reflective code loading on Windows is mechanisms related to the .NET Common Language Runtime (CLR) -- such as mscor.dll, mscoree.dll, and clr.dll -- loading into abnormal processes (such as notepad.exe). Similarly, AMSI / ETW traces can be used to identify signs of arbitrary code execution from within the memory of potentially compromised processes.(Citation: MDSec Detecting DOTNET)(Citation: Introducing Donut)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "defense-evasion"
                }
            ],
            "x_mitre_is_subtechnique": false,
            "x_mitre_data_sources": [
                "Script: Script Execution",
                "Process: OS API Execution",
                "Module: Module Load"
            ],
            "x_mitre_defense_bypassed": [
                "Application control",
                "Anti-virus"
            ],
            "x_mitre_attack_spec_version": "2.1.0",
            "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5"
        }
    ]
}